#!/usr/bin/env python3
"""
üêï Watchdog - —Å—Ç—Ä–∞–∂ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ Claude
–°–ª–µ–¥–∏—Ç –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–±–æ—è–º–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É
"""

import time
import subprocess
import logging
from datetime import datetime, timedelta
from pathlib import Path

logging.basicConfig(
    filename='logs/watchdog.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class Watchdog:
    def __init__(self):
        self.last_success_file = Path("state/last_success.txt")
        self.crash_count_file = Path("state/crash_count.txt")
        self.max_crashes = 3
        self.reset_period = 3600  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å
        
    def check_last_success(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if not self.last_success_file.exists():
            return None
            
        try:
            with open(self.last_success_file, 'r') as f:
                last_time = datetime.fromisoformat(f.read().strip())
                return last_time
        except:
            return None
    
    def update_success_time(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.last_success_file.parent.mkdir(exist_ok=True)
        with open(self.last_success_file, 'w') as f:
            f.write(datetime.now().isoformat())
    
    def get_crash_count(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–±–æ–µ–≤"""
        if not self.crash_count_file.exists():
            return 0
        
        try:
            with open(self.crash_count_file, 'r') as f:
                data = f.read().strip().split('\n')
                count = int(data[0])
                first_crash = datetime.fromisoformat(data[1])
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if datetime.now() - first_crash > timedelta(seconds=self.reset_period):
                    self.reset_crash_count()
                    return 0
                    
                return count
        except:
            return 0
    
    def increment_crash_count(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–±–æ–µ–≤"""
        count = self.get_crash_count()
        
        with open(self.crash_count_file, 'w') as f:
            if count == 0:
                # –ü–µ—Ä–≤—ã–π —Å–±–æ–π - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
                f.write(f"1\n{datetime.now().isoformat()}")
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–±–æ—è
                with open(self.crash_count_file, 'r') as rf:
                    lines = rf.read().strip().split('\n')
                    first_crash = lines[1] if len(lines) > 1 else datetime.now().isoformat()
                f.write(f"{count + 1}\n{first_crash}")
    
    def reset_crash_count(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–±–æ–µ–≤"""
        if self.crash_count_file.exists():
            self.crash_count_file.unlink()
    
    def perform_recovery(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        crash_count = self.get_crash_count()
        
        if crash_count >= self.max_crashes:
            logging.error(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–±–æ–µ–≤ ({crash_count}), —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
            return False
        
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è #{crash_count + 1}")
        self.increment_crash_count()
        
        try:
            # –ñ–µ—Å—Ç–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            subprocess.run(['pkill', '-9', '-f', 'claude'], capture_output=True)
            time.sleep(3)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
            result = subprocess.run(
                ['./start', '--force', '--quiet'],
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                logging.info("–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                self.update_success_time()
                return True
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {result.stderr}")
                return False
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            return False
    
    def monitor(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        last_success = self.check_last_success()
        
        if last_success:
            time_since = datetime.now() - last_success
            
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç –±–µ–∑ —É—Å–ø–µ—Ö–∞ - –ø—Ä–æ–±–ª–µ–º–∞
            if time_since > timedelta(minutes=15):
                logging.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {time_since.total_seconds()/60:.1f} –º–∏–Ω—É—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —á–µ—Ä–µ–∑ health monitor
                health_check = subprocess.run(
                    ['python3', 'health_monitor.py'],
                    capture_output=True,
                    text=True
                )
                
                # –ï—Å–ª–∏ health monitor –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                if health_check.returncode != 0:
                    self.perform_recovery()
        else:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            self.update_success_time()
            logging.info("Watchdog –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    watchdog = Watchdog()
    watchdog.monitor()