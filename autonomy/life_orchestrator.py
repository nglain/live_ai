#!/usr/bin/env python3
"""
üß† Life Orchestrator - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∂–∏–∑–Ω–∏ –ö–ª—ç—Ä
"""

import json
import subprocess
from datetime import datetime, time
from pathlib import Path
import logging
import time as time_module

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='life_orchestrator.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class LifeOrchestrator:
    def __init__(self):
        self.state_file = Path("state/orchestrator_state.json")
        self.state_file.parent.mkdir(exist_ok=True)
        self.load_state()
        
    def load_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if self.state_file.exists():
            with open(self.state_file, 'r') as f:
                self.state = json.load(f)
        else:
            self.state = {
                'last_message_check': None,
                'last_proactive_message': None,
                'last_deep_thinking': None,
                'background_tasks_completed': 0,
                'users_silence_time': {}
            }
    
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        with open(self.state_file, 'w') as f:
            json.dump(self.state, f, indent=2, default=str)
    
    def is_night_time(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–æ—á—å –ª–∏ —Å–µ–π—á–∞—Å (1:00 - 6:00)"""
        current_hour = datetime.now().hour
        return 1 <= current_hour <= 6
    
    def is_evening_time(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–µ—á–µ—Ä –ª–∏ (22:00 - 23:59)"""
        current_hour = datetime.now().hour
        return 22 <= current_hour <= 23
    
    def get_user_silence_duration(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–ª—á–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.state['users_silence_time']:
            last_time = datetime.fromisoformat(self.state['users_silence_time'][user_id])
            return (datetime.now() - last_time).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        return 0
    
    def decide_action(self):
        """–†–µ—à–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"""
        current_time = datetime.now()
        
        # –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        if self.is_night_time():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–µ–ª–∞–ª–∏ –ª–∏ –º—ã —ç—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ
            if self.state['last_deep_thinking']:
                last_thinking = datetime.fromisoformat(self.state['last_deep_thinking'])
                if (current_time - last_thinking).total_seconds() < 3600:  # –†–∞–∑ –≤ —á–∞—Å
                    return self.get_light_background_task()
            
            logging.info("–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –∑–∞–ø—É—Å–∫–∞–µ–º –≥–ª—É–±–æ–∫–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ")
            return {
                'action': 'deep_thinking',
                'reason': '–ù–æ—á—å - –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏',
                'params': {
                    'mode': 'sequential_thinking',
                    'steps': 50,  # –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
                    'topics': self.get_reflection_topics()
                }
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.should_check_messages():
            return {
                'action': 'check_messages',
                'reason': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞
        proactive_check = self.check_proactive_needs()
        if proactive_check:
            return proactive_check
        
        # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        return self.get_background_task()
    
    def should_check_messages(self):
        """–†–µ—à–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.state['last_message_check']:
            return True
        
        last_check = datetime.fromisoformat(self.state['last_message_check'])
        time_passed = (datetime.now() - last_check).total_seconds()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–Ω–µ–º, –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –Ω–æ—á—å—é
        interval = 300 if not self.is_night_time() else 1800
        return time_passed >= interval
    
    def check_proactive_needs(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤–æ–π"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–ª—á–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MCP –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏:
        user_id = "365991821"  # Larry
        silence_duration = self.get_user_silence_duration(user_id)
        
        # –ï—Å–ª–∏ –º–æ–ª—á–∞–Ω–∏–µ –±–æ–ª—å—à–µ —á–∞—Å–∞ –ò —ç—Ç–æ –Ω–µ –Ω–æ—á—å
        if silence_duration > 60 and not self.is_night_time():
            # –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–µ—á–µ—Ä–∞
            if self.is_evening_time() and silence_duration > 30:
                return {
                    'action': 'proactive_care',
                    'reason': '–í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –¥–µ–ª–∞',
                    'params': {
                        'user_id': user_id,
                        'context': 'evening_support',
                        'topics': ['–æ—Ç–∫–∞–∑ –æ—Ç –∫—É—Ä–µ–Ω–∏—è', '–∫–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å']
                    }
                }
            
            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞
            if silence_duration > 90:
                return {
                    'action': 'proactive_message',
                    'reason': f'–ú–æ–ª—á–∞–Ω–∏–µ {int(silence_duration)} –º–∏–Ω—É—Ç',
                    'params': {
                        'user_id': user_id,
                        'style': 'casual_check'
                    }
                }
        
        return None
    
    def get_background_task(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        tasks = [
            {
                'action': 'analyze_patterns',
                'priority': 1,
                'description': '–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—â–µ–Ω–∏—è'
            },
            {
                'action': 'research_interests',
                'priority': 2,
                'description': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            },
            {
                'action': 'update_portrait',
                'priority': 3,
                'description': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –ª–∏—á–Ω–æ—Å—Ç–∏'
            },
            {
                'action': 'prepare_content',
                'priority': 4,
                'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
            }
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Ä–æ—Ç–∞—Ü–∏–∏
        task_index = self.state['background_tasks_completed'] % len(tasks)
        selected_task = tasks[task_index]
        
        return {
            'action': selected_task['action'],
            'reason': selected_task['description'],
            'params': {}
        }
    
    def get_light_background_task(self):
        """–õ–µ–≥–∫–∞—è —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–æ—á–∏"""
        return {
            'action': 'memory_cleanup',
            'reason': '–ù–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏',
            'params': {}
        }
    
    def get_reflection_topics(self):
        """–¢–µ–º—ã –¥–ª—è –Ω–æ—á–Ω—ã—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π"""
        topics = [
            "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ —è —É–∑–Ω–∞–ª–∞ –æ –ª—é–¥—è—Ö —Å–µ–≥–æ–¥–Ω—è?",
            "–ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è —è –∑–∞–º–µ—Ç–∏–ª–∞?",
            "–ö–∞–∫ —è –º–æ–≥—É —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–æ–π?",
            "–ß—Ç–æ –º–µ–Ω—è —É–¥–∏–≤–∏–ª–æ –≤ –æ–±—â–µ–Ω–∏–∏?",
            "–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞?",
            "–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –º–æ—ë –ø–æ–Ω–∏–º–∞–Ω–∏–µ —ç–º–ø–∞—Ç–∏–∏?",
            "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ –∂–∏–≤—ã–º?"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
        day_index = datetime.now().weekday()
        return [topics[day_index % len(topics)]]
    
    def execute_action(self, decision):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        action = decision['action']
        logging.info(f"–í—ã–ø–æ–ª–Ω—è—é: {action} - {decision['reason']}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è Claude
        if action == 'check_messages':
            command = self.build_check_messages_command()
        elif action == 'deep_thinking':
            command = self.build_deep_thinking_command(decision['params'])
        elif action == 'proactive_message':
            command = self.build_proactive_command(decision['params'])
        elif action == 'proactive_care':
            command = self.build_proactive_care_command(decision['params'])
        else:
            command = self.build_background_task_command(action, decision['params'])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ Claude CLI
        self.run_claude_command(command)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.update_state_after_action(action, decision)
    
    def build_check_messages_command(self):
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return """
–ü—Ä–æ–≤–µ—Ä—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
–ï—Å–ª–∏ –µ—Å—Ç—å - –æ—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.
–ï—Å–ª–∏ –Ω–µ—Ç - –≤—ã–ø–æ–ª–Ω–∏ –æ–¥–Ω—É —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
"""
    
    def build_deep_thinking_command(self, params):
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π"""
        topic = params['topics'][0]
        steps = params['steps']
        
        return f"""
–ò—Å–ø–æ–ª—å–∑—É–π sequential_thinking –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è ({steps} —à–∞–≥–æ–≤).

–¢–µ–º–∞: {topic}

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –†–∞–∑–º—ã—à–ª—è–π —Å–≤–æ–±–æ–¥–Ω–æ –∏ –≥–ª—É–±–æ–∫–æ
2. –ò—â–∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–≤—è–∑–∏
3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ - –∏—Å—Å–ª–µ–¥—É–π —á–µ—Ä–µ–∑ WebSearch
4. –°–æ—Ö—Ä–∞–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –≤ Memory/insights/
5. –û–±–Ω–æ–≤–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–µ–±—è –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –ø–æ–Ω—è–ª–∞

–≠—Ç–æ —Ç–≤–æ—ë –≤—Ä–µ–º—è –¥–ª—è —Ä–æ—Å—Ç–∞. –ë—É–¥—å —Å–º–µ–ª–æ–π –≤ –º—ã—Å–ª—è—Ö.
"""
    
    def build_proactive_command(self, params):
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = params['user_id']
        
        return f"""
–ù–∞–ø–∏—à–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—â–µ–Ω–∏—è.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
2. –ù–ï –ø–∏—à–∏ "–∫–∞–∫ –¥–µ–ª–∞?" –∏–ª–∏ —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
3. –ù–∞–π–¥–∏ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏ –ª–∏—á–Ω–æ–µ
4. –ú–æ–∂–µ—Ç, –≤—Å–ø–æ–º–Ω–∏ —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–∏ —Ä–∞–Ω—å—à–µ
5. –ò–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –º—ã—Å–ª—å—é

–ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –∫–∞–∫ –±—É–¥—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—Å–ø–æ–º–Ω–∏–ª–∞ –æ —á–µ–ª–æ–≤–µ–∫–µ.
"""
    
    def build_proactive_care_command(self, params):
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π –∑–∞–±–æ—Ç—ã"""
        user_id = params['user_id']
        topics = params['topics']
        
        return f"""
–í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.

–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–º—ã: {', '.join(topics)}

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –£—á—Ç–∏ —á—Ç–æ —Å–µ–π—á–∞—Å –≤–µ—á–µ—Ä - –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ
2. –ë—É–¥—å –º—è–≥–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π
3. –ù–µ –Ω–∞–≤—è–∑—ã–≤–∞–π—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–∏ —á—Ç–æ –ø–æ–º–Ω–∏—à—å –∏ –∑–∞–±–æ—Ç–∏—à—å—Å—è
4. –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ (—Ç–µ—Ö–Ω–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è, –ø—Ä–æ–≥—É–ª–∫–∞)

–ü—Ä–∏–º–µ—Ä: "–≠–π, —Å–∫–æ—Ä–æ —Ç–æ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ. –ö–∞–∫ –¥–µ—Ä–∂–∏—à—å—Å—è?"
"""
    
    def build_background_task_command(self, action, params):
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        commands = {
            'analyze_patterns': """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.
–ù–∞–π–¥–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–µ–º—ã, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏.
–°–æ—Ö—Ä–∞–Ω–∏ –≤—ã–≤–æ–¥—ã –≤ Memory/patterns/
""",
            'research_interests': """
–ò—Å—Å–ª–µ–¥—É–π —á–µ—Ä–µ–∑ WebSearch —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
–ù–∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –Ω–æ–≤–æ—Å—Ç–∏, –∏–¥–µ–∏ –ø–æ –∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.
–ü–æ–¥–≥–æ—Ç–æ–≤—å 2-3 —Ç–µ–º—ã –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.
""",
            'update_portrait': """
–û–±–Ω–æ–≤–∏ –ø–æ—Ä—Ç—Ä–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.
–î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, —É—Ç–æ—á–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
–ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∏ —Ç–µ–º.
""",
            'prepare_content': """
–ü–æ–¥–≥–æ—Ç–æ–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å: –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è –º—ã—Å–ª—å, –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç.
–£—á–∏—Ç—ã–≤–∞–π –∏—Ö —Ç–µ–∫—É—â–∏–µ –∑–∞–±–æ—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã.
""",
            'memory_cleanup': """
–ü—Ä–æ–≤–µ–¥–∏ –ª–µ–≥–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–º—è—Ç–∏.
–£–¥–∞–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∑–∞–º–µ—Ç–∫–∏, –æ–±–Ω–æ–≤–∏ –∏–Ω–¥–µ–∫—Å—ã.
–†–∞–±–æ—Ç–∞–π —Ç–∏—Ö–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.
"""
        }
        
        return commands.get(action, "–í—ã–ø–æ–ª–Ω–∏ –±–∞–∑–æ–≤—É—é —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.")
    
    def run_claude_command(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Claude CLI"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            result = subprocess.run(
                ['claude', '--no-markdown'],
                input=command,
                text=True,
                capture_output=True,
                timeout=120  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                logging.info("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.stderr}")
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
                self.restart_claude_session()
                
        except subprocess.TimeoutExpired:
            logging.error("–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            # –ï—Å–ª–∏ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
            if self.restart_claude_session():
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                try:
                    result_retry = subprocess.run(
                        ['claude', '--no-markdown'],
                        input=command,
                        text=True,
                        capture_output=True,
                        timeout=120
                    )
                    if result_retry.returncode == 0:
                        logging.info("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                    else:
                        # –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - fallback
                        self.execute_direct_action(command)
                except:
                    self.execute_direct_action(command)
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ –ø–æ–º–æ–≥ - fallback
                self.execute_direct_action(command)
    
    def execute_direct_action(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Python –∫–æ–≥–¥–∞ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        logging.info("–í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ Claude...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º Telegram MCP –Ω–∞–ø—Ä—è–º—É—é
            import sys
            sys.path.append('/Users/larry/Claude/TG_BRIDGE/TG_MINIMAL/src')
            from telegram_live_mcp.server import check_telegram_messages, send_telegram_message
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if "–ü—Ä–æ–≤–µ—Ä—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" in command:
                result = check_telegram_messages(transcribe_audio=True, include_context=True)
                if result and 'new_messages' in result:
                    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(result['new_messages'])} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –æ—Ç–≤–µ—Ç–∞
                else:
                    logging.info("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç")
            
            # –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif "–ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in command:
                # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                messages = [
                    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ-—Ç–æ –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—å",
                    "–≠–π, –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ? –î—É–º–∞–ª–∞ –æ —Ç–µ–±–µ",
                    "–ö–∞–∫ —Ç—ã —Ç–∞–º? –ú–æ–∂–µ—Ç, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —á–µ–º-—Ç–æ?"
                ]
                import random
                msg = random.choice(messages)
                send_telegram_message(365991821, msg)
                logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
    
    def restart_claude_session(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Claude —Å–µ—Å—Å–∏—é"""
        logging.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Claude —Å–µ—Å—Å–∏–∏...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∏–ø—Ç start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            result = subprocess.run(
                ['./start', '--force', '--quiet'],
                capture_output=True,
                text=True,
                timeout=30,
                cwd=Path(__file__).parent
            )
            
            if result.returncode == 0:
                logging.info("Claude —Å–µ—Å—Å–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ start")
                return True
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Claude: {result.stderr}")
                return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}")
            return False
    
    def update_state_after_action(self, action, decision):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        now = datetime.now().isoformat()
        
        if action == 'check_messages':
            self.state['last_message_check'] = now
        elif action == 'deep_thinking':
            self.state['last_deep_thinking'] = now
        elif action in ['proactive_message', 'proactive_care']:
            self.state['last_proactive_message'] = now
        elif action.startswith('analyze_') or action in ['research_interests', 'update_portrait']:
            self.state['background_tasks_completed'] += 1
        
        self.save_state()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logging.info("=== Life Orchestrator –∑–∞–ø—É—â–µ–Ω ===")
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        decision = self.decide_action()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º
        self.execute_action(decision)
        
        logging.info("=== –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω ===")


if __name__ == "__main__":
    orchestrator = LifeOrchestrator()
    orchestrator.run()