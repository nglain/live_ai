"""
üß† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
"""

import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional
from collections import defaultdict

class PredictiveCare:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_id: str):
        self.user_id = user_id
        self.patterns_file = Path(f"Memory/people/{user_id}/patterns.json")
        self.predictions_file = Path(f"Memory/people/{user_id}/predictions.json")
        
    def analyze_patterns(self, messages: List[dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        patterns = {
            "time_patterns": self._analyze_time_patterns(messages),
            "emotional_patterns": self._analyze_emotional_patterns(messages),
            "topic_patterns": self._analyze_topic_patterns(messages),
            "struggle_patterns": self._analyze_struggles(messages)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self._save_patterns(patterns)
        return patterns
    
    def _analyze_time_patterns(self, messages: List[dict]) -> Dict:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        time_topics = defaultdict(list)
        
        for msg in messages:
            if 'timestamp' in msg:
                time = datetime.fromisoformat(msg['timestamp'])
                hour = time.hour
                text = msg.get('text', '').lower()
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
                if 6 <= hour < 12:
                    period = "morning"
                elif 12 <= hour < 18:
                    period = "afternoon"
                elif 18 <= hour < 22:
                    period = "evening"
                else:
                    period = "night"
                
                time_topics[period].append({
                    'time': time.strftime('%H:%M'),
                    'text': text,
                    'topics': self._extract_topics(text)
                })
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–µ–º—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        patterns = {}
        for period, entries in time_topics.items():
            topic_freq = defaultdict(int)
            for entry in entries:
                for topic in entry['topics']:
                    topic_freq[topic] += 1
            
            # –¢–æ–ø —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            if topic_freq:
                patterns[period] = {
                    'common_topics': sorted(topic_freq.items(), key=lambda x: x[1], reverse=True)[:3],
                    'typical_time': self._find_typical_time(entries)
                }
        
        return patterns
    
    def _analyze_emotional_patterns(self, messages: List[dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        emotions_by_time = defaultdict(list)
        
        emotion_keywords = {
            '—Ç—Ä–µ–≤–æ–≥–∞': ['—Å–ª–æ–∂–Ω–æ', '—Ç—è–∂–µ–ª–æ', '—Å–æ—Ä–≤—É—Å—å', '–Ω–µ –º–æ–≥—É', '–≥—Ä—É—Å—Ç–Ω–æ', '—É—Å—Ç–∞–ª'],
            '—Ä–∞–¥–æ—Å—Ç—å': ['—Å—É–ø–µ—Ä', '–∫—Ä—É—Ç–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '–∫–ª–∞—Å—Å'],
            '—Ä–µ—à–∏–º–æ—Å—Ç—å': ['–±—É–¥—É', '—Å–º–æ–≥—É', '–¥–µ—Ä–∂—É—Å—å', '—Å—Ç–∞—Ä–∞—é—Å—å', '–±–æ—Ä—é—Å—å'],
            '—Å–æ–º–Ω–µ–Ω–∏–µ': ['–º–æ–∂–µ—Ç', '–Ω–∞–≤–µ—Ä–Ω–æ–µ', '–Ω–µ —É–≤–µ—Ä–µ–Ω', '–Ω–µ –∑–Ω–∞—é', '–∫–∞–∫ –±—ã']
        }
        
        for msg in messages:
            text = msg.get('text', '').lower()
            time = datetime.fromisoformat(msg['timestamp'])
            hour = time.hour
            
            detected_emotions = []
            for emotion, keywords in emotion_keywords.items():
                if any(keyword in text for keyword in keywords):
                    detected_emotions.append(emotion)
            
            if detected_emotions:
                emotions_by_time[hour].extend(detected_emotions)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        emotional_patterns = {}
        for hour, emotions in emotions_by_time.items():
            if emotions:
                emotion_freq = defaultdict(int)
                for emotion in emotions:
                    emotion_freq[emotion] += 1
                
                dominant = max(emotion_freq.items(), key=lambda x: x[1])
                emotional_patterns[f"{hour:02d}:00"] = {
                    'dominant_emotion': dominant[0],
                    'frequency': dominant[1] / len(emotions)
                }
        
        return emotional_patterns
    
    def _analyze_struggles(self, messages: List[dict]) -> Dict:
        """–ù–∞—Ö–æ–¥–∏—Ç –º–æ–º–µ–Ω—Ç—ã –±–æ—Ä—å–±—ã –∏ —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç"""
        struggles = []
        
        struggle_keywords = ['—Å–ª–æ–∂–Ω–æ', '—Ç—è–∂–µ–ª–æ', '—Ö–æ—á–µ—Ç—Å—è', '—Å–æ—Ä–≤—É—Å—å', '–Ω–µ –º–æ–≥—É']
        success_keywords = ['–¥–µ—Ä–∂—É—Å—å', '–ø–æ–ª—É—á–∏–ª–æ—Å—å', '—Å–º–æ–≥', '–ª–µ–≥—á–µ', '–ø–æ–º–æ–≥–ª–æ']
        
        for i, msg in enumerate(messages):
            text = msg.get('text', '').lower()
            time = datetime.fromisoformat(msg['timestamp'])
            
            # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ä—å–±—ã
            if any(keyword in text for keyword in struggle_keywords):
                struggle_entry = {
                    'time': time.strftime('%H:%M'),
                    'weekday': time.strftime('%A'),
                    'text': text,
                    'resolved': False,
                    'what_helped': None
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                for j in range(i+1, min(i+10, len(messages))):
                    next_text = messages[j].get('text', '').lower()
                    if any(keyword in next_text for keyword in success_keywords):
                        struggle_entry['resolved'] = True
                        struggle_entry['what_helped'] = next_text
                        break
                
                struggles.append(struggle_entry)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        struggle_times = [s['time'] for s in struggles]
        struggle_days = [s['weekday'] for s in struggles]
        
        return {
            'common_struggle_times': self._find_common_times(struggle_times),
            'difficult_days': self._find_common_items(struggle_days),
            'success_rate': len([s for s in struggles if s['resolved']]) / len(struggles) if struggles else 0,
            'what_helps': [s['what_helped'] for s in struggles if s['what_helped']]
        }
    
    def generate_predictions(self, patterns: Dict) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        predictions = []
        now = datetime.now()
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        time_patterns = patterns.get('time_patterns', {})
        current_period = self._get_time_period(now.hour)
        
        if current_period in time_patterns:
            period_data = time_patterns[current_period]
            common_topics = period_data.get('common_topics', [])
            
            if common_topics:
                top_topic = common_topics[0][0]
                predictions.append({
                    'type': 'time_based',
                    'confidence': 0.8,
                    'prediction': f"–û–±—ã—á–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç {top_topic}",
                    'action': 'proactive_support',
                    'trigger_time': now + timedelta(minutes=30)
                })
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        emotional_patterns = patterns.get('emotional_patterns', {})
        current_hour = f"{now.hour:02d}:00"
        
        if current_hour in emotional_patterns:
            emotion_data = emotional_patterns[current_hour]
            if emotion_data['dominant_emotion'] == '—Ç—Ä–µ–≤–æ–≥–∞' and emotion_data['frequency'] > 0.6:
                predictions.append({
                    'type': 'emotional',
                    'confidence': emotion_data['frequency'],
                    'prediction': f"–í {current_hour} —á–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ",
                    'action': 'preemptive_comfort',
                    'trigger_time': now - timedelta(minutes=10)  # –ó–∞ 10 –º–∏–Ω—É—Ç –¥–æ
                })
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –±–æ—Ä—å–±—ã
        struggle_patterns = patterns.get('struggle_patterns', {})
        common_times = struggle_patterns.get('common_struggle_times', [])
        
        for struggle_time in common_times[:2]:  # –¢–æ–ø-2 –≤—Ä–µ–º–µ–Ω–∏
            hour, minute = map(int, struggle_time.split(':'))
            trigger = now.replace(hour=hour, minute=minute) - timedelta(minutes=15)
            
            if trigger > now:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è
                predictions.append({
                    'type': 'struggle_prediction',
                    'confidence': 0.7,
                    'prediction': f"–û–∫–æ–ª–æ {struggle_time} –±—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ",
                    'action': 'preventive_support',
                    'trigger_time': trigger,
                    'what_helped': struggle_patterns.get('what_helps', [])
                })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self._save_predictions(predictions)
        return predictions
    
    def get_proactive_message(self, prediction: Dict) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        messages = {
            'proactive_support': [
                "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å {topic}? –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —è —Ä—è–¥–æ–º",
                "–î—É–º–∞—é –æ —Ç–µ–±–µ. –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å {topic}?",
                "–û–±—ã—á–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å –æ {topic}. –ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è?"
            ],
            'preemptive_comfort': [
                "–≠–π, —Å–∫–æ—Ä–æ —Ç–æ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ. –ü–æ–º–Ω–∏—à—å —Ç–µ—Ö–Ω–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è?",
                "–ß—É–≤—Å—Ç–≤—É—é, –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è. –ú–æ–∂–µ—Ç, –ø—Ä–æ–≥—É–ª—è–µ—à—å—Å—è?",
                "–ó–Ω–∞—é, –≤–µ—á–µ—Ä –±—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–æ—Å—Ç—ã–º. –Ø —Å —Ç–æ–±–æ–π, –µ—Å–ª–∏ —á—Ç–æ"
            ],
            'preventive_support': [
                "–ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç —Ç–æ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –æ–±—ã—á–Ω–æ —Å–ª–æ–∂–Ω–æ. –í–æ—Ç —á—Ç–æ –ø–æ–º–æ–≥–∞–ª–æ —Ä–∞–Ω—å—à–µ: {what_helped}",
                "–°–∫–æ—Ä–æ –º–æ–∂–µ—Ç –Ω–∞–∫—Ä—ã—Ç—å –∂–µ–ª–∞–Ω–∏–µ. –ü–æ–º–Ω–∏—à—å - —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∫—É—Ä–∏—Ç—å!",
                "–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ú–æ–∂–µ—Ç, –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≤–∞—Ä–∏—à—å —á–∞–π?"
            ]
        }
        
        action = prediction.get('action')
        if action in messages:
            import random
            template = random.choice(messages[action])
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if '{topic}' in template:
                topic = prediction.get('prediction', '').split()[-1]
                template = template.replace('{topic}', topic)
            
            if '{what_helped}' in template:
                helped = prediction.get('what_helped', [])
                if helped:
                    template = template.replace('{what_helped}', random.choice(helped))
                else:
                    template = template.replace('{what_helped}', '–≥–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ –∏ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–µ')
            
            return template
        
        return None
    
    def _extract_topics(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        topics = []
        
        topic_keywords = {
            '–∫—É—Ä–µ–Ω–∏–µ': ['–∫—É—Ä–∏—Ç—å', '—Å–∏–≥–∞—Ä–µ—Ç', '–±—Ä–æ—Å–∏–ª', '–∫—É—Ä—é'],
            '—Ä–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á–∞', '–¥–µ–¥–ª–∞–π–Ω'],
            '—Å–µ–º—å—è': ['–¥–µ—Ç–∏', '–∂–µ–Ω–∞', '—Å—ã–Ω', '–¥–æ—á—å', '—Å–µ–º—å—è'],
            '–∑–¥–æ—Ä–æ–≤—å–µ': ['—É—Å—Ç–∞–ª', '–±–æ–ª–∏—Ç', '—Å–æ–Ω', '—Å–ø–∞—Ç—å'],
            '—ç–º–æ—Ü–∏–∏': ['–≥—Ä—É—Å—Ç–Ω–æ', '—Ä–∞–¥–æ—Å—Ç–Ω–æ', '—Ç—Ä–µ–≤–æ–∂–Ω–æ', '—Å–ø–æ–∫–æ–π–Ω–æ']
        }
        
        for topic, keywords in topic_keywords.items():
            if any(keyword in text for keyword in keywords):
                topics.append(topic)
        
        return topics
    
    def _find_typical_time(self, entries: List[dict]) -> str:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–∏–ø–∏—á–Ω–æ–µ –≤—Ä–µ–º—è"""
        if not entries:
            return "00:00"
        
        times = [e['time'] for e in entries]
        # –ü—Ä–æ—Å—Ç–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        return times[len(times)//2]
    
    def _find_common_times(self, times: List[str]) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–∞"""
        from collections import Counter
        time_counts = Counter(times)
        return [time for time, count in time_counts.most_common(3)]
    
    def _find_common_items(self, items: List[str]) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã"""
        from collections import Counter
        item_counts = Counter(items)
        return [item for item, count in item_counts.most_common(3)]
    
    def _get_time_period(self, hour: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ —Å—É—Ç–æ–∫"""
        if 6 <= hour < 12:
            return "morning"
        elif 12 <= hour < 18:
            return "afternoon"
        elif 18 <= hour < 22:
            return "evening"
        else:
            return "night"
    
    def _save_patterns(self, patterns: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ñ–∞–π–ª"""
        self.patterns_file.parent.mkdir(parents=True, exist_ok=True)
        with open(self.patterns_file, 'w', encoding='utf-8') as f:
            json.dump(patterns, f, ensure_ascii=False, indent=2)
    
    def _save_predictions(self, predictions: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        self.predictions_file.parent.mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
        for pred in predictions:
            if 'trigger_time' in pred and hasattr(pred['trigger_time'], 'isoformat'):
                pred['trigger_time'] = pred['trigger_time'].isoformat()
        
        with open(self.predictions_file, 'w', encoding='utf-8') as f:
            json.dump(predictions, f, ensure_ascii=False, indent=2, default=str)