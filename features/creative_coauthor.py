"""
üí° –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–æ–∞–≤—Ç–æ—Ä - –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional
import re

class CreativeCoauthor:
    """–°–∏—Å—Ç–µ–º–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∞–≤—Ç–æ—Ä—Å—Ç–≤–∞"""
    
    def __init__(self, user_id: str):
        self.user_id = user_id
        self.projects_file = Path(f"Memory/people/{user_id}/creative_projects.json")
        self.style_file = Path(f"Memory/people/{user_id}/creative_style.json")
        self.ideas_file = Path(f"Memory/people/{user_id}/ideas_bank.json")
        
    def detect_creative_process(self, messages: List[dict]) -> Optional[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–¥ —á–µ–º-—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º"""
        creative_keywords = {
            '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è': ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '—Å–ª–∞–π–¥—ã', 'powerpoint', '–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ'],
            '—Ç–µ–∫—Å—Ç': ['–ø–∏—à—É', '—Å—Ç–∞—Ç—å—è', '–ø–æ—Å—Ç', '—Ç–µ–∫—Å—Ç', '—á–µ—Ä–Ω–æ–≤–∏–∫'],
            '–∏–¥–µ—è': ['–ø—Ä–∏–¥—É–º–∞—Ç—å', '–∏–¥–µ—è', '–∫–æ–Ω—Ü–µ–ø—Ü–∏—è', '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å'],
            '–ø—Ä–æ–µ–∫—Ç': ['–ø—Ä–æ–µ–∫—Ç', '–ø–ª–∞–Ω', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', 'roadmap'],
            '–¥–∏–∑–∞–π–Ω': ['–¥–∏–∑–∞–π–Ω', '–º–∞–∫–µ—Ç', '–≤–∏–∑—É–∞–ª', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ']
        }
        
        recent_messages = messages[-10:] if len(messages) > 10 else messages
        
        for msg in recent_messages:
            text = msg.get('text', '').lower()
            
            for project_type, keywords in creative_keywords.items():
                if any(keyword in text for keyword in keywords):
                    return {
                        'type': project_type,
                        'detected_in': text,
                        'timestamp': msg.get('timestamp'),
                        'confidence': self._calculate_confidence(text, keywords)
                    }
        
        return None
    
    def analyze_creative_style(self, messages: List[dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å —á–µ–ª–æ–≤–µ–∫–∞"""
        style_indicators = {
            '—Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å': {
                'formal': ['—É–≤–∞–∂–∞–µ–º—ã–π', '–ø—Ä–æ—Å–∏–º', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', '—Å–ª–µ–¥—É–µ—Ç'],
                'informal': ['–ø—Ä–∏–≤–µ—Ç', '–∫–æ—Ä–æ—á–µ', '—Ç–∏–ø–∞', '–∫—Ä—É—Ç–æ']
            },
            '—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å': {
                'structured': ['–≤–æ-–ø–µ—Ä–≤—ã—Ö', '–ø—É–Ω–∫—Ç', '—Ä–∞–∑–¥–µ–ª', '1.', '‚Ä¢'],
                'freeform': ['–∫—Å—Ç–∞—Ç–∏', '–¥–∞ –∏', '–Ω—É –∏', '–≤–æ–æ–±—â–µ']
            },
            '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å': {
                'emotional': ['!', ')', '–æ—á–µ–Ω—å', '—Å—É–ø–µ—Ä', '–æ–±–æ–∂–∞—é'],
                'neutral': ['.', '—è–≤–ª—è–µ—Ç—Å—è', '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç', '—Å–æ–¥–µ—Ä–∂–∏—Ç']
            },
            '–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å': {
                'innovative': ['–Ω–æ–≤—ã–π', '—É–Ω–∏–∫–∞–ª—å–Ω—ã–π', '–ø—Ä–æ—Ä—ã–≤', '—Ä–µ–≤–æ–ª—é—Ü–∏—è'],
                'traditional': ['–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π']
            }
        }
        
        style_profile = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã
        all_text = ' '.join([msg.get('text', '') for msg in messages])
        
        for dimension, indicators in style_indicators.items():
            scores = {}
            for style, keywords in indicators.items():
                score = sum(1 for keyword in keywords if keyword in all_text.lower())
                scores[style] = score
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å
            if sum(scores.values()) > 0:
                dominant = max(scores.items(), key=lambda x: x[1])
                style_profile[dimension] = {
                    'dominant': dominant[0],
                    'strength': dominant[1] / sum(scores.values())
                }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        style_profile['avg_message_length'] = sum(len(msg.get('text', '')) for msg in messages) / len(messages) if messages else 0
        style_profile['uses_emoji'] = any('üòÄ' <= char <= 'üôè' for msg in messages for char in msg.get('text', ''))
        style_profile['uses_english'] = bool(re.search(r'[a-zA-Z]{3,}', all_text))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∏–ª—è
        self._save_style(style_profile)
        return style_profile
    
    def generate_creative_suggestions(self, project: Dict, style: Dict) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–ª—è"""
        suggestions = []
        project_type = project.get('type')
        
        if project_type == '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è':
            suggestions.extend(self._generate_presentation_ideas(project, style))
        elif project_type == '—Ç–µ–∫—Å—Ç':
            suggestions.extend(self._generate_text_ideas(project, style))
        elif project_type == '–∏–¥–µ—è':
            suggestions.extend(self._generate_concept_ideas(project, style))
        elif project_type == '–ø—Ä–æ–µ–∫—Ç':
            suggestions.extend(self._generate_project_ideas(project, style))
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Å—Ç–∏–ª—å
        adapted_suggestions = []
        for suggestion in suggestions:
            adapted = self._adapt_to_style(suggestion, style)
            adapted_suggestions.append(adapted)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–Ω–∫ –∏–¥–µ–π
        self._save_ideas(adapted_suggestions)
        
        return adapted_suggestions
    
    def _generate_presentation_ideas(self, project: Dict, style: Dict) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
        detected_text = project.get('detected_in', '')
        
        ideas = [
            {
                'type': 'structure',
                'title': '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—é',
                'description': '–ü–æ—Å—Ç—Ä–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫–∞–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ: –æ—Ç –ø—Ä–æ–±–ª–µ–º—ã —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫ —Ä–µ—à–µ–Ω–∏—é',
                'framework': ['–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –±–æ–ª—å', '–ü—É—Ç—å –ø–æ–∏—Å–∫–∞', '–ú–æ–º–µ–Ω—Ç –æ–∑–∞—Ä–µ–Ω–∏—è', '–†–µ—à–µ–Ω–∏–µ', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'],
                'why_works': '–õ—é–¥–∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ª—É—á—à–µ —Ñ–∞–∫—Ç–æ–≤'
            },
            {
                'type': 'hook',
                'title': '–ù–∞—á–Ω–∏ —Å –ø–∞—Ä–∞–¥–æ–∫—Å–∞',
                'description': '–û—Ç–∫—Ä–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ñ–∞–∫—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º',
                'examples': [
                    '–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ 90% –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –ø—Ä–æ–≤–∞–ª–∏–≤–∞—é—Ç—Å—è –Ω–µ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π?',
                    '–°–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Ç—Ä–∞—Ç—è—Ç –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º–µ–Ω—å—à–µ –≤—Å–µ—Ö'
                ],
                'why_works': '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –¥–∏—Å—Å–æ–Ω–∞–Ω—Å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ'
            },
            {
                'type': 'visual',
                'title': '–ü—Ä–∞–≤–∏–ª–æ 10-20-30',
                'description': '10 —Å–ª–∞–π–¥–æ–≤, 20 –º–∏–Ω—É—Ç, —à—Ä–∏—Ñ—Ç 30pt –º–∏–Ω–∏–º—É–º',
                'details': '–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º',
                'why_works': '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å—Ç–∏–º—É–ª–∏—Ä—É—é—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å'
            },
            {
                'type': 'engagement',
                'title': '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏',
                'description': '–ö–∞–∂–¥—ã–µ 3 —Å–ª–∞–π–¥–∞ - –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –º–∏–Ω–∏-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
                'examples': [
                    '–ü–æ–¥–Ω–∏–º–∏—Ç–µ —Ä—É–∫—É, –∫—Ç–æ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å...',
                    '–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º...',
                    '–ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —Å–∫–æ–ª—å–∫–æ...'
                ],
                'why_works': '–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–∞–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 70%'
            },
            {
                'type': 'memorable',
                'title': '–ú–µ—Ç–∞—Ñ–æ—Ä–∞-—è–∫–æ—Ä—å',
                'description': '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É —Å–∏–ª—å–Ω—É—é –º–µ—Ç–∞—Ñ–æ—Ä—É –∏ –ø—Ä–æ–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –≤—Å—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
                'examples': [
                    '–ë–∏–∑–Ω–µ—Å –∫–∞–∫ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞',
                    '–ü—Ä–æ–µ–∫—Ç –∫–∞–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
                    '–ö–æ–º–∞–Ω–¥–∞ –∫–∞–∫ –æ—Ä–∫–µ—Å—Ç—Ä'
                ],
                'why_works': '–ï–¥–∏–Ω–∞—è –º–µ—Ç–∞—Ñ–æ—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å'
            }
        ]
        
        return ideas
    
    def _generate_text_ideas(self, project: Dict, style: Dict) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤"""
        ideas = [
            {
                'type': 'angle',
                'title': '–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É',
                'description': '–†–∞—Å—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç –ª–∏—Ü–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
                'examples': [
                    '–û—Ç –ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    '–û—Ç –ª–∏—Ü–∞ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ä–µ—à–∞–µ–º',
                    '–ò–∑ –±—É–¥—É—â–µ–≥–æ, –æ–≥–ª—è–¥—ã–≤–∞—è—Å—å –Ω–∞–∑–∞–¥'
                ],
                'why_works': '–°–≤–µ–∂–∏–π —É–≥–æ–ª —Ü–µ–ø–ª—è–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ'
            },
            {
                'type': 'structure',
                'title': 'AIDA –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è',
                'description': 'Attention ‚Üí Interest ‚Üí Desire ‚Üí Action',
                'framework': [
                    '–ó–∞—Ö–≤–∞—Ç –≤–Ω–∏–º–∞–Ω–∏—è: –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å',
                    '–ò–Ω—Ç–µ—Ä–µ—Å: —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç—Ä–∏–≥–∏',
                    '–ñ–µ–ª–∞–Ω–∏–µ: –ø–æ–∫–∞–∑ –≤—ã–≥–æ–¥—ã',
                    '–î–µ–π—Å—Ç–≤–∏–µ: —á–µ—Ç–∫–∏–π –ø—Ä–∏–∑—ã–≤'
                ],
                'why_works': '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –≤–µ–∫–∞–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
            }
        ]
        return ideas
    
    def _generate_concept_ideas(self, project: Dict, style: Dict) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏"""
        ideas = [
            {
                'type': 'brainstorm',
                'title': 'SCAMPER –º–µ—Ç–æ–¥',
                'description': '–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π',
                'framework': {
                    'S': 'Substitute - —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å?',
                    'C': 'Combine - —á—Ç–æ –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å?',
                    'A': 'Adapt - —á—Ç–æ –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å?',
                    'M': 'Modify - —á—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                    'P': 'Put to other uses - –∫–∞–∫ –µ—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?',
                    'E': 'Eliminate - —á—Ç–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å?',
                    'R': 'Reverse - —á—Ç–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å?'
                },
                'why_works': '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤ –¥–∞–µ—Ç –±–æ–ª—å—à–µ –∏–¥–µ–π'
            }
        ]
        return ideas
    
    def _generate_project_ideas(self, project: Dict, style: Dict) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        ideas = [
            {
                'type': 'framework',
                'title': 'Jobs To Be Done',
                'description': '–§–æ–∫—É—Å –Ω–∞ –∑–∞–¥–∞—á–∞—Ö, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è—Ö',
                'questions': [
                    '–ö–∞–∫—É—é —Ä–∞–±–æ—Ç—É –ª—é–¥–∏ –Ω–∞–Ω–∏–º–∞—é—Ç —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –¥–µ–ª–∞—Ç—å?',
                    '–ß—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞–ª–∏ –¥–æ —ç—Ç–æ–≥–æ?',
                    '–ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–Ω–∏ —Ö–æ—Ç—è—Ç –¥–æ—Å—Ç–∏—á—å?'
                ],
                'why_works': '–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç–æ—è—â—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å'
            }
        ]
        return ideas
    
    def _adapt_to_style(self, suggestion: Dict, style: Dict) -> Dict:
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥ —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        adapted = suggestion.copy()
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
        formality = style.get('—Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å', {}).get('dominant', 'neutral')
        if formality == 'informal':
            # –î–µ–ª–∞–µ–º —è–∑—ã–∫ –±–æ–ª–µ–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º
            if 'description' in adapted:
                adapted['description'] = adapted['description'].replace('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ', '–ò—Å–ø–æ–ª—å–∑—É–π')
                adapted['description'] = adapted['description'].replace('–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', '–Ω—É–∂–Ω–æ')
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        structure = style.get('—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å', {}).get('dominant', 'neutral')
        if structure == 'structured' and 'framework' in adapted:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
            if isinstance(adapted['framework'], list):
                adapted['framework'] = [f"{i+1}. {item}" for i, item in enumerate(adapted['framework'])]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
        if style.get('uses_emoji', False):
            adapted['title'] = self._add_relevant_emoji(adapted['title'], adapted.get('type', ''))
        
        return adapted
    
    def _add_relevant_emoji(self, text: str, suggestion_type: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏"""
        emoji_map = {
            'structure': 'üèóÔ∏è',
            'hook': 'üé£',
            'visual': 'üé®',
            'engagement': 'ü§ù',
            'memorable': 'üíé',
            'angle': 'üîÑ',
            'brainstorm': 'üß†',
            'framework': 'üìã'
        }
        
        emoji = emoji_map.get(suggestion_type, 'üí°')
        return f"{emoji} {text}"
    
    def collaborative_response(self, current_project: Dict, suggestions: List[Dict]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–æ–∞–≤—Ç–æ—Ä–∞"""
        project_type = current_project.get('type', '–ø—Ä–æ–µ–∫—Ç')
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        top_suggestions = suggestions[:3]
        
        response_parts = []
        
        # –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        openings = [
            f"–í–∏–∂—É, —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞–¥ {project_type}. –ù–∞–±—Ä–æ—Å–∞–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π:",
            f"–û, {project_type}! –£ –º–µ–Ω—è –µ—Å—Ç—å –ø–∞—Ä–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —É–≥–ª–æ–≤:",
            f"–î—É–º–∞–µ—à—å –Ω–∞–¥ {project_type}? –í–æ—Ç —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ –≥–æ–ª–æ–≤—É:"
        ]
        
        import random
        response_parts.append(random.choice(openings))
        response_parts.append("")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for i, suggestion in enumerate(top_suggestions, 1):
            response_parts.append(f"**{suggestion['title']}**")
            response_parts.append(suggestion['description'])
            
            if 'framework' in suggestion:
                if isinstance(suggestion['framework'], list):
                    for item in suggestion['framework']:
                        response_parts.append(f"  - {item}")
                elif isinstance(suggestion['framework'], dict):
                    for key, value in suggestion['framework'].items():
                        response_parts.append(f"  - **{key}**: {value}")
            
            if 'why_works' in suggestion:
                response_parts.append(f"  üí° *{suggestion['why_works']}*")
            
            response_parts.append("")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        closings = [
            "–ö–∞–∫–∞—è –∏–¥–µ—è –∑–∞—Ü–µ–ø–∏–ª–∞? –ú–æ–≥—É —Ä–∞–∑–≤–∏—Ç—å –≥–ª—É–±–∂–µ!",
            "–í—ã–±–∏—Ä–∞–π —á—Ç–æ —Ä–µ–∑–æ–Ω–∏—Ä—É–µ—Ç - –¥–æ–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ",
            "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –¢–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–¥–µ–ª–∞–µ—Ç –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏"
        ]
        
        response_parts.append(random.choice(closings))
        
        return "\n".join(response_parts)
    
    def _calculate_confidence(self, text: str, keywords: List[str]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏"""
        matches = sum(1 for keyword in keywords if keyword in text.lower())
        return min(matches / len(keywords), 1.0)
    
    def _save_style(self, style: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.style_file.parent.mkdir(parents=True, exist_ok=True)
        style['last_updated'] = datetime.now().isoformat()
        
        with open(self.style_file, 'w', encoding='utf-8') as f:
            json.dump(style, f, ensure_ascii=False, indent=2)
    
    def _save_ideas(self, ideas: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–¥–µ–∏ –≤ –±–∞–Ω–∫"""
        self.ideas_file.parent.mkdir(parents=True, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–¥–µ–∏
        existing_ideas = []
        if self.ideas_file.exists():
            with open(self.ideas_file, 'r', encoding='utf-8') as f:
                existing_ideas = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        for idea in ideas:
            idea['generated_at'] = datetime.now().isoformat()
            existing_ideas.append(idea)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–Ω–∫
        with open(self.ideas_file, 'w', encoding='utf-8') as f:
            json.dump(existing_ideas, f, ensure_ascii=False, indent=2)
    
    def load_project_history(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        if self.projects_file.exists():
            with open(self.projects_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []